import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DynamicAPICallAnomalyDetection {

    public static void main(String[] args) {
        // Simulated dynamic API call sequences for different processes
        List<String> process1APIs = new ArrayList<>();
        process1APIs.add("openFile");
        process1APIs.add("readFile");
        process1APIs.add("closeFile");

        List<String> process2APIs = new ArrayList<>();
        process2APIs.add("openFile");
        process2APIs.add("writeFile");
        process2APIs.add("closeFile");

        List<String> process3APIs = new ArrayList<>();
        process3APIs.add("openFile");
        process3APIs.add("deleteFile");
        process3APIs.add("closeFile");

        // Map to store process ID and corresponding API call sequences
        Map<Integer, List<String>> processMap = new HashMap<>();
        processMap.put(1, process1APIs);
        processMap.put(2, process2APIs);
        processMap.put(3, process3APIs);

        // Detect anomalies in API call sequences
        for (Map.Entry<Integer, List<String>> entry : processMap.entrySet()) {
            int processId = entry.getKey();
            List<String> apiCalls = entry.getValue();

            // Check for anomalies based on predefined rules (e.g., unexpected API call sequences)
            if (detectAnomaly(apiCalls)) {
                System.out.println("Anomaly detected in process " + processId);
            }
        }
    }

    // Method to detect anomalies in API call sequences
    public static boolean detectAnomaly(List<String> apiCalls) {
        // Example: Check if "deleteFile" API is called without prior "openFile" and "closeFile"
        for (int i = 0; i < apiCalls.size(); i++) {
            if (apiCalls.get(i).equals("deleteFile")) {
                if (i == 0 || !apiCalls.contains("openFile") || !apiCalls.contains("closeFile")) {
                    return true; // Anomaly detected
                }
            }
        }
        return false;
    }
}
